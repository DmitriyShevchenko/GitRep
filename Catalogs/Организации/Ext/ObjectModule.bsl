#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	// Найдем типовые условия
	ДополнительныеУсловияПоУмолчанию = Справочники.ДополнительныеУсловия.ПолучитьТиповыеУсловия();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ИндивидуальныйПредприниматель");
		МассивНепроверяемыхРеквизитов.Добавить("ФамилияИП");
		МассивНепроверяемыхРеквизитов.Добавить("ИмяИП");
		МассивНепроверяемыхРеквизитов.Добавить("ИсторияНаименований.ФамилияИП");
		МассивНепроверяемыхРеквизитов.Добавить("ИсторияНаименований.ИмяИП");
		Если НЕ ОбособленноеПодразделение Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ГоловнаяОрганизация");
		КонецЕсли; 
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("ИндивидуальныйПредприниматель");
		МассивНепроверяемыхРеквизитов.Добавить("ГоловнаяОрганизация");
		// Эти реквизиты проверяются в нетиповым механизмом. Проверка размещена в ПроверитьЗаполнениеНаименовнийДляИП()
		МассивНепроверяемыхРеквизитов.Добавить("Наименование");
		МассивНепроверяемыхРеквизитов.Добавить("НаименованиеСокращенное");
		ПроверитьЗаполнениеНаименованийДляИП(Отказ);
	КонецЕсли;
	
	Если ВидОбменаСКонтролирующимиОрганами <> Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате Тогда
		МассивНепроверяемыхРеквизитов.Добавить("УчетнаяЗаписьОбмена");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	// Реквизит ГоловнаяОрганизация должен быть заполнен всегда, 
	// даже когда в организации нет обособленных подразделений.
	// В последнем (тривиальном) случае ГоловнаяОрганизация должна указывать на саму организацию - 
	// ссылаться сама на себя.
	// Многие прикладные алгоритмы не рассчитаны на то, что реквизит ГоловнаяОрганизация не будет заполнен.
	// Поэтому обеспечим его заполнение в тривиальном случае.
	
	Если ОбособленноеПодразделение И (ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо) Тогда
		ОбособленноеПодразделение = Ложь;
	КонецЕсли;
	
	ЕстьОбособленныеПодразделения = ПолучитьФункциональнуюОпцию("ВестиУчетПоПодразделениям");
	
	Если Не ОбособленноеПодразделение Тогда
		
		Если Не ЭтоНовый() Тогда
			
			Если ГоловнаяОрганизация <> Ссылка Тогда
				ГоловнаяОрганизация = Ссылка;
			КонецЕсли;
			
		Иначе
			
			// Свойство "Ссылка" заведомо не заполнено.
			// Но в ходе обмена ссылка может быть передана.
			
			СсылкаНового = ПолучитьСсылкуНового();
			Если Не СсылкаНового.Пустая() Тогда
				Если ГоловнаяОрганизация <> СсылкаНового Тогда
					ГоловнаяОрганизация = СсылкаНового;
				КонецЕсли;
			Иначе
				УстановитьСсылкуНового(Справочники.Организации.ПолучитьСсылку());
				ГоловнаяОрганизация = ПолучитьСсылкуНового();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("СтарыйИНН", 
		?(ЭтоНовый(), "", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ИНН")));
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИНН = СокрП(ИНН);
	
	Если ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
		И НЕ ЗначениеЗаполнено(ИндивидуальныйПредприниматель) Тогда
		
		УстановитьИндивидуальногоПредпринимателя();
		
	КонецЕсли;
	
	Если ИсторияНаименований.Количество() = 1 Тогда
		// Если запись в истории наименований одна, то считается, что изменений нет
		// и значение наименования нужно определять из данных объекта.
		ИсторияНаименований.Очистить();
	ИначеЕсли ИсторияНаименований.Количество() > 1 Тогда
		// Первая запись в истории должна иметь пустую дату
		ИсторияНаименований.Сортировать("Период");
		ИсторияНаименований[0].Период = '00010101';
		
		// Последняя запись в истории всегда должна соответствовать наименованию в объекте
		Справочники.Организации.УстановитьАктуальноеЗначениеИсторииНаименований(НаименованиеСокращенное, НаименованиеПолное, ИсторияНаименований);
	КонецЕсли;
	
	Если РайонныйКоэффициент < 1 
		ИЛИ РайонныйКоэффициент > 3 Тогда
		РайонныйКоэффициент = 1;
	КонецЕсли;
		
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если НЕ ОбособленноеПодразделение Тогда
		ИНН	                = "";
		ГоловнаяОрганизация	= Неопределено;
	КонецЕсли;
	
	ПрефиксБП20 = "";
	
	ОсновнойБанковскийСчет = Неопределено;
	
	КПП					         = "";
	КодНалоговогоОргана	         = "";
	РегистрацияВНалоговомОргане  = Неопределено;
	НаименованиеНалоговогоОргана = "";
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	// Регистр РеквизитыСервисаПроверокКонтролирующимиОрганами не участвует в обменах данными
	// и в загрузке-выгрузке данных в сервисе. Поэтому записи этого регистра нужно создавать
	// и в случае записи в режиме ОбменДанными.Загрузка
	РеквизитыСервисаПроверок = РеквизитыСервисаПроверокКонтролирующимиОрганами();
	Справочники.ПроверкиКонтролирующимиОрганами.ЗаписатьРеквизитыСервисаПроверокПриЗаписиОрганизации(
		РеквизитыСервисаПроверок);
	
	Если НЕ Отказ И ПолучитьФункциональнуюОпцию("НачалоРаботы") Тогда
		Константы.НачалоРаботы.Установить(Ложь);
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Справочники.БанковскиеСчета.ПроверитьУстановитьЗначениеОпцииИспользоватьНесколькоБанковскихСчетовОрганизации(Ссылка);
	
	СоздатьОсновноеПодразделение();
	СоздатьСтавкиНалогаНаИмущество();
	ЗаписатьУчетнуюПолитикуОбособленногоПодразделения();
	УчетЗарплаты.СоздатьПараметрыУчетаЗарплаты(Ссылка);
	ВключитьДляНФОУчетПоСтатьямДДС();
	
	ТребуетсяСоздатьПоставляемыеВидыНалогов = Истина;
	Если ДополнительныеСвойства.Свойство("ТребуетсяСоздатьПоставляемыеВидыНалогов") Тогда
		ТребуетсяСоздатьПоставляемыеВидыНалогов = ДополнительныеСвойства.ТребуетсяСоздатьПоставляемыеВидыНалогов;
	КонецЕсли;
	
	Справочники.Организации.ОбновитьИспользуемыеВидыОрганизаций(ТребуетсяСоздатьПоставляемыеВидыНалогов);
	
	// БРО
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПриЗаписиОрганизации(ЭтотОбъект, Отказ);
	
	Справочники.ПроверкиКонтролирующимиОрганами.ОбновитьЗадачиБухгалтераПриЗаписиОрганизации(РеквизитыСервисаПроверок);
	
	Если НЕ Отказ И ОбособленноеПодразделение Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьОсновноеПодразделение()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПодразделенияОрганизаций.Ссылка
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Владелец = &Организация";
	Запрос.УстановитьПараметр("Организация", Ссылка);
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Подразделение = Справочники.ПодразделенияОрганизаций.СоздатьЭлемент();
	Подразделение.Владелец = Ссылка;
	Подразделение.Наименование = "Основное подразделение";
	Подразделение.Записать();
		
КонецПроцедуры

Процедура СоздатьСтавкиНалогаНаИмущество()

	НаборЗаписей = РегистрыСведений.СтавкиНалогаНаИмущество.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период = НачалоГода(ТекущаяДатаСеанса());
	Запись.Организация = Ссылка;
	Запись.НалоговаяСтавка = 2.2;

	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура УстановитьИндивидуальногоПредпринимателя()
	
	Если НЕ ЗначениеЗаполнено(ФамилияИП)
		И НЕ ЗначениеЗаполнено(ИмяИП) Тогда
		// Если не заполнены фамилия и имя, то и создавать физическое лицо не требуется.
		Возврат;
	КонецЕсли;
	
	// Возможно, физическое лицо, которое соответствует индивидуальному предпринимателю уже есть в ИБ
	// Поищем его сначала по ИНН, а потом по ФИО
	
	ФИО = СокрЛП(ФамилияИП)+" "+СокрЛП(ИмяИП)+" "+СокрЛП(ОтчествоИП);
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("ИНН", ИНН);
	Запрос.Параметры.Вставить("ФИО", ФИО);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка,
	|	1 КАК Приоритет
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.ИНН = &ИНН
	|	И ФизическиеЛица.ИНН <> """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка,
	|	2
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.ФИО = &ФИО
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ИндивидуальныйПредприниматель = Выборка.Ссылка;
	Иначе
		
		ФИО = Новый Структура("Фамилия, Имя, Отчество", ФамилияИП, ИмяИП, ОтчествоИП);
		ДанныеФизическогоЛица = Новый Структура("ИНН", ИНН);
		ФизлицоОбъект = КадровыйУчет.НовоеФизическоеЛицо(ФИО, ДанныеФизическогоЛица);
		ИндивидуальныйПредприниматель = ФизлицоОбъект.Ссылка;
		
		Для Каждого СтрокаКонтактнойИнформации Из КонтактнаяИнформация Цикл
			Если СтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации Тогда
				СтрокаКонтактнойИнформацииФизлица = ФизлицоОбъект.КонтактнаяИнформация.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаКонтактнойИнформацииФизлица, СтрокаКонтактнойИнформации);
				СтрокаКонтактнойИнформацииФизлица.Вид = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
			ИначеЕсли СтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации Тогда
				СтрокаКонтактнойИнформацииФизлица = ФизлицоОбъект.КонтактнаяИнформация.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаКонтактнойИнформацииФизлица, СтрокаКонтактнойИнформации);
				СтрокаКонтактнойИнформацииФизлица.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица;
			КонецЕсли;
		КонецЦикла;
		
		Если ФизлицоОбъект.КонтактнаяИнформация.Количество() > 0 Тогда
			ФизлицоОбъект.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьУчетнуюПолитикуОбособленногоПодразделения()

	Если НЕ ОбособленноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	// Копируем учетную политику головной организации для обособленного подразделения, только если ранее учетная политика
	// обособленного подразделения не задавалась.
	// Алгоритм копирования измененений учетной политики головной организации в её обособленные подразделения описан в
	// модуле регистра сведений УчетнаяПолитикаОрганизаций.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК УчетнаяПолитикаЗадана
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|ГДЕ
	|	УчетнаяПолитикаОрганизаций.Организация = &ОбособленноеПодразделение";
	Запрос.УстановитьПараметр("ОбособленноеПодразделение", Ссылка); 
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписиГоловнойОрганизации = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
	ЗаписиГоловнойОрганизации.Отбор.Организация.Установить(ГоловнаяОрганизация);
	ЗаписиГоловнойОрганизации.Прочитать();
	
	КопируемыеЗаписиГоловнойОрганизации = ЗаписиГоловнойОрганизации.Выгрузить();
	КопируемыеЗаписиГоловнойОрганизации.ЗаполнитьЗначения(Ссылка, "Организация");
	
	ЗаписиПодразделения = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
	ЗаписиПодразделения.Отбор.Организация.Установить(Ссылка);
	ЗаписиПодразделения.Загрузить(КопируемыеЗаписиГоловнойОрганизации);
	ЗаписиПодразделения.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
	ЗаписиПодразделения.Записать(Истина);

КонецПроцедуры

Процедура ПроверитьЗаполнениеНаименованийДляИП(Отказ)
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ФамилияИП)
			И НЕ ЗначениеЗаполнено(ЭтотОбъект.ИмяИП) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверяемыеПоля = Новый Структура;
	ПроверяемыеПоля.Вставить("Наименование"           , НСтр("ru='Наименование в программе'"));
	ПроверяемыеПоля.Вставить("НаименованиеСокращенное", НСтр("ru='Сокращенное наименование'"));
	
	Для Каждого ПроверяемоеПоле Из ПроверяемыеПоля Цикл
		
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект[ПроверяемоеПоле.Ключ]) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение",
				ПроверяемоеПоле.Значение);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "НаименованиеИП",
				, Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьРеквизитыСервисаПроверокКонтролирующимиОрганами()
	
	ИзменилсяИНН = ДополнительныеСвойства.Свойство("СтарыйИНН")
		И ИНН <> ДополнительныеСвойства.СтарыйИНН;
	Если НЕ ИзменилсяИНН Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Ссылка",    Ссылка);
	Реквизиты.Вставить("ИНН",       ИНН);
	Реквизиты.Вставить("СтарыйИНН", ДополнительныеСвойства.СтарыйИНН);
	Реквизиты.Вставить("ЮридическоеФизическоеЛицо", ЮридическоеФизическоеЛицо);
	Реквизиты.Вставить("ОбособленноеПодразделение", ОбособленноеПодразделение);
	
	Справочники.ПроверкиКонтролирующимиОрганами.ОбновитьЗадачиБухгалтераПриЗаписиОрганизации(Реквизиты, ОбменДанными.Загрузка);
	
КонецПроцедуры

Функция РеквизитыСервисаПроверокКонтролирующимиОрганами()

	Реквизиты = Новый Структура;
	
	Реквизиты.Вставить("ИзменилсяИНН", ДополнительныеСвойства.Свойство("СтарыйИНН")
		И ИНН <> ДополнительныеСвойства.СтарыйИНН);
	Если НЕ Реквизиты.ИзменилсяИНН Тогда
		Возврат Реквизиты;
	КонецЕсли;
	
	Реквизиты.Вставить("Ссылка",    Ссылка);
	Реквизиты.Вставить("ИНН",       ИНН);
	Реквизиты.Вставить("СтарыйИНН", ДополнительныеСвойства.СтарыйИНН);
	Реквизиты.Вставить("ЗначениеРазделителя",       ОбщегоНазначения.ЗначениеРазделителяСеанса());
	Реквизиты.Вставить("ОбособленноеПодразделение", ОбособленноеПодразделение);
	ЭтоЮридическоеЛицо = ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	Реквизиты.Вставить("КорректныйИНН", РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(
		ИНН, ЭтоЮридическоеЛицо, ""));
	Реквизиты.Вставить("КорректныйСтарыйИНН", РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(
		ДополнительныеСвойства.СтарыйИНН, ЭтоЮридическоеЛицо, ""));
	Возврат Реквизиты;
	
КонецФункции

Процедура ВключитьДляНФОУчетПоСтатьямДДС()
	
	Если НЕ НекредитнаяФинансоваяОрганизация Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Справочники.СтатьиДвиженияДенежныхСредств.УстановитьУчетПоСтатьямДДС(Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли