#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоГруппа И ТипОплаты = Перечисления.ТипыОплат.Наличные Тогда
		
		Если ЗначениеЗаполнено(Организация) Тогда
			Организация = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетУчетаРасчетов) Тогда
			СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;
		
	ИначеЕсли НЕ ЭтоГруппа И НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") 
		И НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		
		ПараметрыДоговора = Новый Структура;
		ПараметрыДоговора.Вставить("Владелец", Контрагент);
		ПараметрыДоговора.Вставить("Организация", Организация);
		ПараметрыДоговора.Вставить("ВидДоговора", Справочники.ВидыОплатОрганизаций.ВидыДоговоровПоТипуОплаты(ТипОплаты)[0]);
	
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Если НЕ РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
			ДоговорКонтрагента, 
			ПараметрыДоговора.Владелец, 
			ПараметрыДоговора.Организация, 
			ПараметрыДоговора.ВидДоговора) Тогда
		
			ПараметрыСоздания = Новый Структура("ЗначенияЗаполнения", ПараметрыДоговора);
			ДоговорКонтрагента = РаботаСДоговорамиКонтрагентовБПВызовСервера.СоздатьОсновнойДоговорКонтрагента(ПараметрыСоздания);
		КонецЕсли;
	
	КонецЕсли;
	
	ВыполнитьПроверкуКлючевыхРеквизитов(Отказ);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	Если НЕ ЭтоГруппа Тогда
		
		МассивНепроверяемыхРеквизитов = Новый Массив;
		
		Если ТипОплаты = Перечисления.ТипыОплат.Наличные Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Организация");
			МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
			МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
			МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетов");
		КонецЕсли;
		
		Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
		КонецЕсли;
		
		// Удаляем из проверяемых реквизитов все, по которым автоматическая проверка не нужна:
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнениеДокументов.ЗаполнитьПоСтруктуре(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	Если НЕ ЭтоГруппа Тогда
		СчетУчетаРасчетов = Справочники.ВидыОплатОрганизаций.СчетУчетаРасчетовПоУмолчанию(ТипОплаты);
		
		Если ЗначениеЗаполнено(Организация) Тогда
			Организация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
		Иначе
			Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыполнитьПроверкуКлючевыхРеквизитов(Отказ)

	ПроверитьДублированиеПодарочногоСертификата(Отказ);
	
	Если Отказ Или ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	// Получим значения реквизитов элемента из информационной базы
	РеквизитыСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,
		"ТипОплаты, Контрагент, ДоговорКонтрагента, СчетУчетаРасчетов, Организация, ПометкаУдаления");
	
	Если ПометкаУдаления <> РеквизитыСсылки.ПометкаУдаления тогда
		//В случае установки или снятия пометки удаления не производить проверку
		Возврат;
	КонецЕсли;
	
	// Проверим, можно ли изменять реквизиты элемента
	Если ИзменениеКлючевыхРеквизитовЗапрещено(РеквизитыСсылки) Тогда
		
		СписокРеквизитов = Новый Структура("ТипОплаты, Контрагент, ДоговорКонтрагента, СчетУчетаРасчетов, Организация",
					НСтр("ru = 'Способ оплаты'"),
					НСтр("ru = 'Контрагент'"),
					НСтр("ru = 'Договор контрагента'"),
					НСтр("ru = 'Счет учета расчетов'"),
					НСтр("ru = 'Организация'"));
		ТекстСообщения = НСтр("ru = 'Существуют документы, проведенные по виду оплаты %1.
			|Реквизит %2 не может быть изменен.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Наименование);
		Для Каждого КлючИЗначение Из СписокРеквизитов Цикл
			СообщитьОНекорректномРеквизите(КлючИЗначение.Ключ, КлючИЗначение.Значение, ТекстСообщения, РеквизитыСсылки, Отказ);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДублированиеПодарочногоСертификата(Отказ)
	
	Если ЭтоГруппа
		Или (ТипОплаты <> Перечисления.ТипыОплат.ПодарочныйСертификатСобственный
			И ТипОплаты <> Перечисления.ТипыОплат.ПодарочныйСертификатСторонний) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Организация", Организация);
	Если Не ЭтоНовый() Тогда
		Запрос.УстановитьПараметр("ТекущаяСсылка", Ссылка);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыОплатОрганизаций.Ссылка
	|ИЗ
	|	Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
	|ГДЕ
	|	ВидыОплатОрганизаций.Контрагент = &Контрагент
	|	И ВидыОплатОрганизаций.ДоговорКонтрагента = &ДоговорКонтрагента
	|	И ВидыОплатОрганизаций.Организация = &Организация
	|	И (ВидыОплатОрганизаций.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСобственный)
	|			ИЛИ ВидыОплатОрганизаций.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний))
	|	И &ОтборПоСсылке";
	
	ТекстОтборПоСсылке = ?(ЭтоНовый(), "ИСТИНА", "НЕ ВидыОплатОрганизаций.Ссылка = &ТекущаяСсылка");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоСсылке", ТекстОтборПоСсылке);
	
	ВыборкаДублей = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаДублей.Следующий() Тогда
		
		ТекстСообщения = НСтр("ru = 'Подарочный сертификат с такой аналитикой расчетов (контрагент, договор)
			|уже зарегистрирован (см. ""%1""'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаДублей.Ссылка);
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИзменениеКлючевыхРеквизитовЗапрещено(РеквизитыСсылки)

	Если Контрагент <> РеквизитыСсылки.Контрагент
		Или ДоговорКонтрагента <> РеквизитыСсылки.ДоговорКонтрагента
		Или СчетУчетаРасчетов <> РеквизитыСсылки.СчетУчетаРасчетов
		Или Организация <> РеквизитыСсылки.Организация
		Или ТипОплаты <> РеквизитыСсылки.ТипОплаты Тогда

		УстановитьПривилегированныйРежим(Истина);

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Элемент", Ссылка);
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументыПоВидуОплаты.Ссылка КАК ДокументПоВидуОплаты
		|ИЗ
		|	КритерийОтбора.ДокументыПоВидуОплаты(&Элемент) КАК ДокументыПоВидуОплаты
		|ГДЕ
		|	ДокументыПоВидуОплаты.Ссылка.Проведен";
		
		Возврат Не Запрос.Выполнить().Пустой();

	Иначе
		//ключевые реквизиты не менялись
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Процедура СообщитьОНекорректномРеквизите(ИмяРеквизита, СинонимРеквизита, ШаблонСообщения, РеквизитыСсылки, Отказ)

	Если ЭтотОбъект[ИмяРеквизита] <> РеквизитыСсылки[ИмяРеквизита] Тогда
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%2", СинонимРеквизита);
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Корректность", 
			СинонимРеквизита, , , ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ИмяРеквизита, "Объект", Отказ);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецЕсли
