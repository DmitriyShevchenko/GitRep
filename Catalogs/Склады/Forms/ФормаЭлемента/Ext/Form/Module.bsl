
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	ПрочитатьОтветственноеЛицо();
	
	НеавтоматизированнаяТорговаяТочка = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка;
	
	Если Параметры.Ключ.Пустая() Тогда
		ЗаполнитьНоменклатурнуюГруппуНТТ(ЭтотОбъект);
	КонецЕсли;

	УправлениеФормой(ЭтаФорма);
	
	УстановитьУсловноеОформление();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Справочник.Склады",
		"ФормаЭлемента",
		НСтр("ru='Новости: Склад'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьФорму"
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ИмяЭлемента")
		И Параметр.ИмяЭлемента = "ОтветственноеЛицо" Тогда
		 ПрочитатьОтветственноеЛицо();
	КонецЕсли;	
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	ЗаписатьОтветственноеЛицо(ТекущийОбъект.Ссылка, Отказ);

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_Склада", , Объект.Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ТипСкладаПриИзменении(Элемент)

	УправлениеФормой(ЭтаФорма);

	ЗаполнитьНоменклатурнуюГруппуНТТ(ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ИсторияОтветственныхЛиц(Команда)

	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("СтруктурнаяЕдиница", Объект.Ссылка));
	ОткрытьФорму("РегистрСведений.ОтветственныеЛица.ФормаСписка", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаВНТТ(Команда)

	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ПолучитьКлючЗаписиРегистраСчетаУчетаВНТТ(Объект.Ссылка));
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура("Период, ТорговаяТочка", '19800101', Объект.Ссылка));
	
	ОткрытьФорму("РегистрСведений.СчетаУчетаВНТТ.ФормаЗаписи", ПараметрыФормы, ЭтаФорма, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();


	// ТипЦенРозничнойТорговли

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТипЦенРозничнойТорговли");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ТипСклада", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ТипыСкладов.ОптовыйСклад);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.НоменклатурнаяГруппа.Доступность = (Объект.ТипСклада = Форма.НеавтоматизированнаяТорговаяТочка);
	
	Если Объект.ТипСклада = Форма.НеавтоматизированнаяТорговаяТочка Тогда
		Элементы.ГруппаСчетаУчетаВНТТ.ТекущаяСтраница = Элементы.ГруппаСчетаУчетаВНТТГиперссылка;
	Иначе
		Элементы.ГруппаСчетаУчетаВНТТ.ТекущаяСтраница = Элементы.ГруппаСчетаУчетаВНТТСкрыты;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКлючЗаписиРегистраСчетаУчетаВНТТ(Знач ТорговаяТочка)

	Если НЕ ЗначениеЗаполнено(ТорговаяТочка) Тогда
		Возврат РегистрыСведений.СчетаУчетаВНТТ.ПустойКлюч();
	КонецЕсли;
	
	Отбор = Новый Структура("ТорговаяТочка", ТорговаяТочка);
	СрезПоследних = РегистрыСведений.СчетаУчетаВНТТ.СрезПоследних(ТекущаяДатаСеанса(), Отбор);
	
	Если СрезПоследних.Количество() > 0 Тогда
		ДанныеКлюча = Новый Структура("Период, ТорговаяТочка");
		ЗаполнитьЗначенияСвойств(ДанныеКлюча, СрезПоследних[0]);
		КлючЗаписи = РегистрыСведений.СчетаУчетаВНТТ.СоздатьКлючЗаписи(ДанныеКлюча);
	Иначе
		КлючЗаписи = РегистрыСведений.СчетаУчетаВНТТ.ПустойКлюч();
	КонецЕсли;
	
	Возврат КлючЗаписи;
	
КонецФункции

&НаСервере
Процедура ПрочитатьОтветственноеЛицо()

	ОтветственноеЛицо = ОтветственныеЛицаБП.ОтветственноеЛицоНаСкладе(Объект.Ссылка, ТекущаяДата());

КонецПроцедуры

&НаСервере
Процедура ЗаписатьОтветственноеЛицо(СсылкаНаОбъект, Отказ)

	Отбор = Новый Структура("СтруктурнаяЕдиница");
	Отбор.СтруктурнаяЕдиница = СсылкаНаОбъект;
	СрезПоследних = РегистрыСведений.ОтветственныеЛица.СрезПоследних(ТекущаяДата(), Отбор);

	Если СрезПоследних.Количество() < 1 Тогда
		Если НЕ ЗначениеЗаполнено(ОтветственноеЛицо) Тогда
			Возврат;
		Иначе
			ПериодЗаписи = '19800101';
		КонецЕсли;
	Иначе
		Если ОтветственноеЛицо = СрезПоследних[0].ФизическоеЛицо Тогда
			Возврат;
		Иначе
			ПериодЗаписи = ТекущаяДата();
		КонецЕсли;
	КонецЕсли;
	
	НаборЗаписей 	= РегистрыСведений.ОтветственныеЛица.СоздатьНаборЗаписей();
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
    
    НаборЗаписей.Отбор.Период.Установить(ПериодЗаписи);
    НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(СсылкаНаОбъект);
	
	ЗаписьРегистра 	= НаборЗаписей.Добавить();

	ЗаписьРегистра.Период             = ПериодЗаписи;
	ЗаписьРегистра.СтруктурнаяЕдиница = СсылкаНаОбъект;
	ЗаписьРегистра.ФизическоеЛицо     = ОтветственноеЛицо;

	Попытка
		НаборЗаписей.Записать();
	Исключение
		ШаблонСообщения = НСтр("ru = 'Не удалось записать данные об ответственном лице 
                                |%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, КраткоеПредставлениеОшибки(ОписаниеОшибки()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , "Объект", Отказ);
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ОписаниеОшибки()));
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Установка ответственного лица'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Склады,
			СсылкаНаОбъект, 
			ТекстСообщения);
	КонецПопытки;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНоменклатурнуюГруппуНТТ(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.ТипСклада = Форма.НеавтоматизированнаяТорговаяТочка И НЕ ЗначениеЗаполнено(Объект.НоменклатурнаяГруппа) Тогда
		Объект.НоменклатурнаяГруппа = БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа();
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ СВОЙСТВ

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура ОтветственноеЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение <> ОтветственноеЛицо Тогда
		Модифицированность = Истина;
	КонецЕсли; 
КонецПроцедуры
#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти
